;; -*- mode: Lisp -*-

(in-package :stumpwm)

(message "Loading rc!")

;;; Change prefix key
(set-prefix-key (kbd "C-m"))
(define-key *root-map* (kbd "C-m") "other")

;;; Emacsian select
(define-key *root-map* (kbd "b") "select")

(set-fg-color "Yellow")
(set-bg-color "Black")
(set-border-color "Black")

;; defprogram-shortcuts
(defprogram-shortcut emacs :command "emacs" :key (kbd "s-e"))
(defprogram-shortcut conkeror :command "conkeror" :key (kbd "s-x"))
(defprogram-shortcut xterm :command "xterm" :key (kbd "s-c"))

;;; Battery Info
;;; courtesy http://hocwp.free.fr/temp/stumpwmrc
;; (defun extract-battery-info (file field)
;;   (with-open-file (stream file :direction :input)
;;     (loop for line = (read-line stream nil nil)
;; 	  while line do
;; 	  (when (search field line)
;; 	    (return (parse-integer (subseq line (1+ (length field))) :junk-allowed t))))))

;; (defun remaining-battery ()
;;   (extract-battery-info "/proc/acpi/battery/BAT1/state" "remaining capacity:"))

;; (defun full-battery-capacity ()
;;   (extract-battery-info "/proc/acpi/battery/BAT1/info" "last full capacity:"))


;; (define-stumpwm-command "show-battery" (screen)
;;   (let ((rem (remaining-battery))
;; 	(full (full-battery-capacity)))
;;     (echo-string screen (format nil "Battery: ~AmAh / ~AmAh -> ~,1F%" rem full (/ rem full 0.01)))))

;; (define-key *root-map* (kbd "<") "show-battery")

;; Code by Male
;; Display the keysequence in progress
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (eq *top-map* *resize-map*)
    (let ((*message-window-gravity* :bottom-right))
      (message "Key sequence: ~A" (print-key-seq (reverse key-seq))))
    (when (stringp cmd)
      ;; Give 'em time to read it.
      (sleep 0.5))))

(defmacro replace-hook (hook fn)
 `(remove-hook ,hook ,fn)
 `(add-hook ,hook ,fn))

(replace-hook *key-press-hook* 'key-press-hook)
